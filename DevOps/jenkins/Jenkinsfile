pipeline {
    agent any
    environment {
        // 환경 변수 정의
        DOCKER_COMPOSE_FILE = 'DevOps/docker-compose.yml'
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Git 저장소에서 develop 브랜치 클론
                git branch: 'develop', credentialsId: 'seolo-git-token', url: 'https://lab.ssafy.com/s10-final/S10P31C104.git'
            }
        }

        stage('Shutdown Existing Services') {
            steps {
                script {
                    // 이미 실행 중인 서비스를 종료
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} down"
                }
            }
        }

        stage('Prepare Docker Compose') {
            steps {
                script {
                    // docker-compose 설치 확인 및 설치
                    sh '''
                    if ! command -v docker-compose &> /dev/null
                    then
                        echo "Installing docker-compose..."
                        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    else
                        echo "docker-compose is already installed."
                    fi
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Docker Compose를 사용하여 이미지 빌드
                    sh 'pwd'
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} build"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Docker Compose를 사용하여 서비스 배포
                    sh 'pwd'
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // 미사용 Docker 이미지 정리
                    sh 'docker image prune --force --filter "until=24h"'
                }
            }
        }
    }

    post {
        success {
            script {
                echo 'Build was successful.'
                sh 'echo "Successfully completed all stages!"'
            }
        }
    }
}

