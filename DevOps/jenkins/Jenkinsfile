pipeline {
    agent any
    environment {
        // 환경 변수 정의
        DOCKER_COMPOSE_FILE = 'DevOps/docker-compose.yml'
        REPO_URL = 'https://lab.ssafy.com/s10-final/S10P31C104.git'
        BRANCH_NAME = 'develop'
        CREDENTIALS_ID = 'seolo-git-token'
        GITHUB_CREDENTIALS_ID = 'seolo-github-token'
        GITHUB_REPO_URL = 'https://github.com/makeUgreat/seolo-config.git'
        PROFILES_ACTIVE = 'dev'
        FRONTEND_DIR = 'frontend/web' // 프론트엔드 디렉토리 경로
        NGINX_HTML_DIR = '/usr/share/nginx/html' // Nginx가 정적 파일을 서빙할 경로
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend(color: 'warning',
                        message: "빌드 시작: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/xc1nh4iaw7dofr9sooojdhx6qh',
                        channel: 'C104Build'
                    )

                    echo "Cleaning the workspace..."
                    deleteDir() // 현재 작업 공간의 모든 내용을 삭제
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    git branch: env.BRANCH_NAME, credentialsId: env.CREDENTIALS_ID, url: env.REPO_URL

                    dir('backend/seolo/src/main/resources') {
                        sh "sed -i 's/spring.profiles.active: local/spring.profiles.active: ${env.PROFILES_ACTIVE}/' application.yml"

                        sh 'mkdir -p confidence'
                        dir('confidence') {
                            git branch: 'master', credentialsId: env.GITHUB_CREDENTIALS_ID, url: env.GITHUB_REPO_URL
                        }
                    }
                }
            }
        }

        stage('Frontend Build and Serving') {
            steps {
                script {
                    dir(env.FRONTEND_DIR) {
                        sh '''
                        if ! command -v node &> /dev/null
                        then
                            echo "Installing Node.js..."
                            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                            sudo apt-get install -y nodejs
                        else
                            echo "Node.js is already installed."
                        fi

                        npm install
                        npm run build
                        '''

                        sh """
                        rm -rf ${env.NGINX_HTML_DIR}/*
                        cp -R dist/* ${env.NGINX_HTML_DIR}/
                        """
                    }
                }
            }
        }

        stage('Shutdown Existing Services') {
            steps {
                script {
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} down"
                }
            }
        }

        stage('Prepare Docker Compose') {
            steps {
                script {
                    sh '''
                    if ! command -v docker-compose &> /dev/null
                    then
                        echo "Installing docker-compose..."
                        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    else
                        echo "docker-compose is already installed."
                    fi
                    '''
                }
            }
        }

        stage('Backend Build and Deploy') {
            steps {
                script {
                    def profile = env.BRANCH_NAME == 'master' ? 'prod' : 'dev'
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} build --build-arg SPRING_PROFILES_ACTIVE=${profile}"
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    sh 'docker image prune --force --filter "until=24h"'
                }
            }
        }
    }

    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/xc1nh4iaw7dofr9sooojdhx6qh',
                    channel: 'C104Build'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/xc1nh4iaw7dofr9sooojdhx6qh',
                    channel: 'C104Build'
                )
            }
        }
    }
}